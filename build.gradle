import groovy.swing.SwingBuilder

plugins {
    // bintray
    id "com.jfrog.bintray" version "1.6"
}

group = 'org.omegat.gradle'
version = currentVersion

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven"
    }
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    runtime 'org.omegat:omegat:4.1.0'
}

compileGroovy {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task createReleasePropertiesFile(type:Exec) {
    String fileName = 'omegat.plugin.release.properties'
    println "Creating $fileName"
    String fileContent = "version=$currentVersion"
    (new File("$rootDir/src/main/resources/$fileName")).write(fileContent)
}

artifacts {
    archives jar
    archives sourceJar
}

task wrapper(type: Wrapper, description: 'Gradle Wrapper task') {
    gradleVersion = '3.0'
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") ||
            gradle.taskGraph.hasTask("githubRelease") ||
            gradle.taskGraph.hasTask("bintrayUpload")}
    sign configurations.archives
}

install {
    repositories.mavenInstaller {
        pom.project {
            name = project.name
            packaging = 'jar'
            description = projectDesc
            url = projectUrl
            version = project.version
            licenses {
                license {
                    name = 'GNU General Public License, Version 3'
                    url = 'https://www.gnu.org/licenses/gpl.html'
                    distribution = 'repo'
                }
            }
            scm {
                url = githubUrl
                connection = "scm:git:${githubUrl}"
                developerConnection = "scm:git:${githubUrl}"
            }
            developers {
                developer {
                    id = 'miurahr'
                    name = 'Hiroshi Miura'
                    email = 'miurahr@linux.com'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    dryRun = false
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = 'gradle-omegat-plugin'
        desc = projectDesc
        websiteUrl = projectUrl
        issueTrackerUrl = projectUrl + '/issues'
        vcsUrl = projectUrl
        githubRepo = githubUser + '/' + githubRepository
        licenses = ['GPL-3.0']
        labels = ['java', 'OmegaT', 'translation', 'Translation Memory', 'CAT', 'Gradle', 'Bundle', 'resources', 'localize']
        publicDownloadNumbers = true
    }
}

// maven publish to local repository.(for test)
uploadArchives {
    repositories.mavenDeployer {
        // for local maven
        repository url: "file://$System.env.HOME/.m2/repository"
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        pom.project {
            name = project.name
            packaging = 'jar'
            description = projectDesc
            url = projectUrl
            version = project.version
            licenses {
                license {
                    name = 'GNU General Public License, Version 3'
                    url  = 'https://www.gnu.org/licenses/gpl.html'
                    distribution = 'repo'
                }
            }
            scm {
                url = githubUrl
                connection = "scm:git:${githubUrl}"
                developerConnection = "scm:git:${githubUrl}"
            }
            developers {
                developer {
                    id = 'miurahr'
                    name = 'Hiroshi Miura'
                    email = 'miurahr@linux.com'
                }
            }
        }
    }
}

// askPassword - guarantee asking only once.
ext {
    askPassword = ''
}
String askPassword(prompt) {
    if (ext.'askPassword' != '') {
        return ext.'askPassword'
    }
    def keyPass = ''
    if(System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                vbox {
                    label(text: prompt)
                    def input1 = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        keyPass = input1.password;
                        dispose();
                    })
                }
            }
        }
    } else {
        System.console().println()
        keyPass = System.console().readPassword(prompt)
    }
    if (keyPass.size() <= 0) {
        throw new InvalidUserDataException("You must enter the passwords to proceed.")
    }
    ext.'askPassword' = new String(keyPass)
    new String(keyPass)
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            ext.'signing.password' = askPassword("Enter password for PGP key ${property('signing.keyId')}: ")
        }
    }
}
